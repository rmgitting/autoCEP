/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.infoGuru.GUI;

import me.infoGuru.global.Global;
import me.infoGuru.machineLearning.TimeSeries;
import me.infoGuru.machineLearning.ShapeletTrainer;
import me.infoGuru.machineLearning.Classification;
import com.opencsv.CSVReader;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultStyledDocument;
import me.infoGuru.Common;
import me.infoGuru.LogUnifierFrame;
import me.infoGuru.machineLearning.Invoker;
import me.infoGuru.machineLearning.Shapelet;
import me.infoGuru.machineLearning.Trainer;

/**
 *
 * @author Raef M
 */
public class ShapeletTrainerFrame extends javax.swing.JFrame implements Invoker {

    /**
     * Creates new form ShapeletTrainerFrame
     */
    public ShapeletTrainerFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        classGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTextPane = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        violationThresholdSpinner = new javax.swing.JSpinner();
        minShapeletLengthSpinner = new javax.swing.JSpinner();
        maxShapeletLengthSpinner = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        extractShapeletBtn = new javax.swing.JButton();
        threadsChckBox = new javax.swing.JCheckBox();
        thresholdClassRadioBtn = new javax.swing.JRadioButton();
        classInCSVRadioBtn = new javax.swing.JRadioButton();
        jSeparator4 = new javax.swing.JSeparator();
        progressBar = new javax.swing.JProgressBar();
        pauseBtn = new javax.swing.JToggleButton();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        selectTrainingMenuItem = new javax.swing.JMenuItem();
        saveShapeletsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        clearTextPaneMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        logUnifierMenuItem = new javax.swing.JMenuItem();
        settingsMenu = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Shapelet Trainer");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        infoTextPane.setEditable(false);
        jScrollPane1.setViewportView(infoTextPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        jLabel2.setText("Minimum Shapelet Length:");

        jLabel3.setText("Maximum Shapelet Length:");

        violationThresholdSpinner.setModel(new javax.swing.SpinnerNumberModel(14, 0, 50, 1));
        violationThresholdSpinner.setEnabled(false);
        violationThresholdSpinner.setValue(14);

        minShapeletLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(30), Integer.valueOf(1), null, Integer.valueOf(1)));

        maxShapeletLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(30), Integer.valueOf(1), null, Integer.valueOf(1)));

        extractShapeletBtn.setText("Extract Shapelets");
        extractShapeletBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractShapeletBtnActionPerformed(evt);
            }
        });

        threadsChckBox.setSelected(true);
        threadsChckBox.setText("MultiThreading");
        threadsChckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threadsChckBoxActionPerformed(evt);
            }
        });

        classGroup.add(thresholdClassRadioBtn);
        thresholdClassRadioBtn.setText("Classify using a Threshold");
        thresholdClassRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdClassRadioBtnActionPerformed(evt);
            }
        });

        classGroup.add(classInCSVRadioBtn);
        classInCSVRadioBtn.setSelected(true);
        classInCSVRadioBtn.setText("Class exists at the end of the time series");
        classInCSVRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classInCSVRadioBtnActionPerformed(evt);
            }
        });

        progressBar.setStringPainted(true);

        pauseBtn.setText("Pause the Learning");
        pauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(minShapeletLengthSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(maxShapeletLengthSpinner))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(threadsChckBox)
                            .addComponent(extractShapeletBtn)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(thresholdClassRadioBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(violationThresholdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(classInCSVRadioBtn))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pauseBtn)
                .addGap(161, 161, 161))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(violationThresholdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thresholdClassRadioBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(classInCSVRadioBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minShapeletLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threadsChckBox))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(maxShapeletLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extractShapeletBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(pauseBtn))
        );

        fileMenu.setText("File");

        selectTrainingMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        selectTrainingMenuItem.setText("Select Training Dataset");
        selectTrainingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTrainingMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(selectTrainingMenuItem);

        saveShapeletsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveShapeletsMenuItem.setText("Save Shapelets to a Database");
        saveShapeletsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveShapeletsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveShapeletsMenuItem);
        fileMenu.add(jSeparator1);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        clearTextPaneMenuItem.setText("Clear Information Pane");
        clearTextPaneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTextPaneMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(clearTextPaneMenuItem);

        mainMenuBar.add(editMenu);

        viewMenu.setText("View");
        viewMenu.add(jSeparator3);

        logUnifierMenuItem.setText("Open Log Unifier");
        logUnifierMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logUnifierMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(logUnifierMenuItem);

        mainMenuBar.add(viewMenu);

        settingsMenu.setText("Settings");

        settingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        settingsMenu.add(settingsMenuItem);

        mainMenuBar.add(settingsMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectTrainingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTrainingMenuItemActionPerformed

        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter csvFilter = new FileNameExtensionFilter("CSV files (*.csv)", "csv");
        fc.setFileFilter(csvFilter);
        fc.setMultiSelectionEnabled(true);
        fc.setDialogTitle("Choose your Log Files");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File[] chosenLogs = fc.getSelectedFiles();
            if (!fillData(chosenLogs)) {
                return;
            }
            System.out.println("User chose: " + chosenLogs.length + " files");
            Global.writeLog(infoTextPane, Color.black, "User chose " + chosenLogs.length + " files");
        } else {
            System.out.println("User Canceled");
        }
    }//GEN-LAST:event_selectTrainingMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        SettingsDialog dialog = new SettingsDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void clearTextPaneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTextPaneMenuItemActionPerformed

        infoTextPane.setDocument(new DefaultStyledDocument());
    }//GEN-LAST:event_clearTextPaneMenuItemActionPerformed

    private void extractShapeletBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractShapeletBtnActionPerformed
        if (dataNotSet(trainingData)) {
            return;
        }
        int minL = (int) minShapeletLengthSpinner.getValue();
        int maxL = (int) maxShapeletLengthSpinner.getValue();
        if (minL > maxL) {
            JOptionPane.showMessageDialog(this, "Min Shapelet Length needs to be smaller than the maximum length", "Shapelet Length Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (maxL > getMinLogLength()) {
            JOptionPane.showMessageDialog(this, "The minmum size of timeseries in the training set is " + getMinLogLength()
                    + "\n Please set a maximum shapelet length that is smaller or equal to that size", "Shapelet Length Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int maxProgress = 0;
        for (TimeSeries t : trainingData) {
            for (int l = minL; l <= maxL; l++) {
                maxProgress += t.getData().size() - l + 1;
            }
        }
        progressBar.setMaximum(maxProgress);
        System.out.println("Max Progress = " + maxProgress);
        startTime = System.currentTimeMillis();
        if (threadsChckBox.isSelected()) {
            //  trainer.multiThreadedTrain(this, trainingData, minL, maxL, attributeIndex, nbThreads);
            trainer.multiThreadedTrain(this, trainingData, minL, maxL, attributeIndex, nbThreads, progressBar);
        } else {
            //  trainer.train(this, trainingData, minL, maxL, attributeIndex);
            trainer.train(this, trainingData, minL, maxL, attributeIndex, progressBar);
        }
        Global.writeLog(infoTextPane, Color.black, "Extracting Shapelets...");


    }//GEN-LAST:event_extractShapeletBtnActionPerformed

    private void logUnifierMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logUnifierMenuItemActionPerformed

        new LogUnifierFrame().setVisible(true);
    }//GEN-LAST:event_logUnifierMenuItemActionPerformed

    private void threadsChckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threadsChckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_threadsChckBoxActionPerformed

    private void thresholdClassRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdClassRadioBtnActionPerformed
        violationThresholdSpinner.setEnabled(thresholdClassRadioBtn.isSelected());
    }//GEN-LAST:event_thresholdClassRadioBtnActionPerformed

    private void classInCSVRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classInCSVRadioBtnActionPerformed
        violationThresholdSpinner.setEnabled(!classInCSVRadioBtn.isSelected());
    }//GEN-LAST:event_classInCSVRadioBtnActionPerformed

    private void saveShapeletsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveShapeletsMenuItemActionPerformed

        SaveToDatabaseDialog std = new SaveToDatabaseDialog(this, true, shapelets);
        std.setVisible(true);

    }//GEN-LAST:event_saveShapeletsMenuItemActionPerformed

    private void pauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBtnActionPerformed
        if (trainer != null) {
            if (pauseBtn.isSelected()) {
                Global.writeLog(infoTextPane, Color.black, "Pause the Learning Process...");
                trainer.pauseThread();
            } else {
                Global.writeLog(infoTextPane, Color.black, "Continue the Learning Process...");
                trainer.continueThread();
            }
        }
    }//GEN-LAST:event_pauseBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShapeletTrainerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ShapeletTrainerFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup classGroup;
    private javax.swing.JRadioButton classInCSVRadioBtn;
    private javax.swing.JMenuItem clearTextPaneMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton extractShapeletBtn;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextPane infoTextPane;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JMenuItem logUnifierMenuItem;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JSpinner maxShapeletLengthSpinner;
    private javax.swing.JSpinner minShapeletLengthSpinner;
    private javax.swing.JToggleButton pauseBtn;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem saveShapeletsMenuItem;
    private javax.swing.JMenuItem selectTrainingMenuItem;
    private javax.swing.JMenu settingsMenu;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JCheckBox threadsChckBox;
    private javax.swing.JRadioButton thresholdClassRadioBtn;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JSpinner violationThresholdSpinner;
    // End of variables declaration//GEN-END:variables

    private List<TimeSeries> trainingData;
    private List<Shapelet> shapelets;
    private int attributeIndex;
    private int timestampIndex;
    private int nbThreads;
    private Trainer trainer;
    private long startTime;
    private int minLogLength;

    private boolean fillData(File[] chosenLogs) {
        if (chosenLogs.length < 2) {
            JOptionPane.showMessageDialog(this, "You must at least select two log files", "No Enough Log Files Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        setMinLogLength(Integer.MAX_VALUE);
        CSVReader reader = null;
        trainingData = new ArrayList<>();
        for (File f : chosenLogs) {
            try {
                TimeSeries log = new TimeSeries();
                log.setName(f.getName());
                reader = new CSVReader(new FileReader(f));
                log.setData(reader.readAll());
                log = setClassificationClass(log);
                if (log.getData().size() >= (int) maxShapeletLengthSpinner.getValue()) {
                    trainingData.add(log);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ShapeletTrainerFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ShapeletTrainerFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (IOException ex) {
                        Logger.getLogger(ShapeletTrainerFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        if (Classification.classification.size() < 2) {
            JOptionPane.showMessageDialog(this, "You must at least have one log file for each class", "No Enough Log Files Error", JOptionPane.WARNING_MESSAGE);
            trainingData = null;
            return false;
        }
        return true;
    }

    private TimeSeries setClassificationClass(TimeSeries log) {
        if (thresholdClassRadioBtn.isSelected()) {
            Classification.classification.add("UNVIOLATED");
            Classification.classification.add("VIOLATED");
            log.setClassification("UNVIOLATED");
            for (String[] row : log.getData()) {
                if ((Double.parseDouble(row[attributeIndex]) < (int) violationThresholdSpinner.getValue())) {
                    log.setClassification("VIOLATED");
                    break;
                }
            }
        } else if (classInCSVRadioBtn.isSelected()) {
            List<String[]> data = log.getData();
            String cl = data.get(data.size() - 1)[attributeIndex].toUpperCase();
            Classification.classification.add(cl);
            log.setClassification(cl);
            log.setData(data.subList(0, data.size() - 1));
        }
        return log;
    }

    public int getMinLogLength() {
        return minLogLength;
    }

    public void setMinLogLength(int minLogLength) {
        this.minLogLength = minLogLength;
    }

    public int getAttributeIndex() {
        return attributeIndex;
    }

    public void setAttributeIndex(int temperatureIndex) {
        this.attributeIndex = temperatureIndex;
    }

    public int getTimestampIndex() {
        return timestampIndex;
    }

    public void setTimestampIndex(int timestampIndex) {
        this.timestampIndex = timestampIndex;
    }

    public int getNbThreads() {
        return nbThreads;
    }

    public void setNbThreads(int nbThreads) {
        this.nbThreads = nbThreads;
    }

    public Trainer getTrainer() {
        return trainer;
    }

    public void setTrainer(Trainer trainer) {
        this.trainer = trainer;
    }

    public List<Shapelet> getShapelets() {
        return shapelets;
    }

    public void setShapelets(List<Shapelet> shapelets) {
        this.shapelets = shapelets;
    }

    private void reset() {
        setAttributeIndex(1);
        setTimestampIndex(0);
        setNbThreads(10);
        setTrainer(new ShapeletTrainer());
    }

    private boolean dataNotSet(List<TimeSeries> trainingData) {
        if (trainingData == null) {
            JOptionPane.showMessageDialog(this, "Please Choose the Training Files First", "No Log File Error", JOptionPane.WARNING_MESSAGE);
            return true;
        }
        return false;
    }

    @Override
    public void setExtractedShapelets(List<Shapelet> shapelets) {
        this.setShapelets(shapelets);
        System.out.println("I got the shapelets, size: " + shapelets.size());
        Global.writeLog(infoTextPane, Color.black, "Extraction Ended Successfully");
        System.out.println("Learning Phase ended in (sec): " + (System.currentTimeMillis() - startTime) / Common.ONE_SEC_IN_MILLIS);
    }

    @Override
    public void signalException(String desc) {
        System.out.println(desc);
    }

}
